$date
	Tue Feb 20 21:28:47 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module processor_tb $end
$var wire 64 ! valP [63:0] $end
$var wire 64 " valM [63:0] $end
$var wire 64 # valE [63:0] $end
$var wire 64 $ valC [63:0] $end
$var wire 64 % valB [63:0] $end
$var wire 64 & valA [63:0] $end
$var wire 4 ' rB [3:0] $end
$var wire 4 ( rA [3:0] $end
$var wire 1 ) memory_error $end
$var wire 1 * invalid_instr $end
$var wire 4 + ifun [3:0] $end
$var wire 4 , icode [3:0] $end
$var wire 1 - halt $end
$var wire 1 . cnd $end
$var wire 1 / ZF $end
$var wire 1 0 SF $end
$var wire 64 1 PC_new [63:0] $end
$var wire 1 2 OF $end
$var reg 64 3 PC [63:0] $end
$var reg 1 4 clk $end
$scope module D $end
$var wire 1 4 clk $end
$var wire 64 5 reg_mem_0 [63:0] $end
$var wire 64 6 reg_mem_1 [63:0] $end
$var wire 64 7 reg_mem_10 [63:0] $end
$var wire 64 8 reg_mem_11 [63:0] $end
$var wire 64 9 reg_mem_12 [63:0] $end
$var wire 64 : reg_mem_13 [63:0] $end
$var wire 64 ; reg_mem_14 [63:0] $end
$var wire 64 < reg_mem_2 [63:0] $end
$var wire 64 = reg_mem_3 [63:0] $end
$var wire 64 > reg_mem_4 [63:0] $end
$var wire 64 ? reg_mem_5 [63:0] $end
$var wire 64 @ reg_mem_6 [63:0] $end
$var wire 64 A reg_mem_7 [63:0] $end
$var wire 64 B reg_mem_8 [63:0] $end
$var wire 64 C reg_mem_9 [63:0] $end
$var wire 4 D rB [3:0] $end
$var wire 4 E rA [3:0] $end
$var wire 4 F icode [3:0] $end
$var reg 64 G valA [63:0] $end
$var reg 64 H valB [63:0] $end
$upscope $end
$scope module E $end
$var wire 1 4 clk $end
$var wire 64 I valA [63:0] $end
$var wire 64 J valB [63:0] $end
$var wire 64 K valC [63:0] $end
$var wire 1 L overflow $end
$var wire 64 M out [63:0] $end
$var wire 4 N ifun [3:0] $end
$var wire 4 O icode [3:0] $end
$var reg 1 2 OF $end
$var reg 1 0 SF $end
$var reg 1 / ZF $end
$var reg 64 P aluA [63:0] $end
$var reg 64 Q aluB [63:0] $end
$var reg 1 R and_out $end
$var reg 1 . cnd $end
$var reg 1 S cndA $end
$var reg 1 T cndB $end
$var reg 2 U control [1:0] $end
$var reg 1 V not_out $end
$var reg 1 W or_out $end
$var reg 64 X valE [63:0] $end
$var reg 1 Y xor_out $end
$scope module alu $end
$var wire 2 Z control [1:0] $end
$var wire 64 [ num1 [63:0] $end
$var wire 64 \ num2 [63:0] $end
$var wire 64 ] out [63:0] $end
$var wire 1 L overflow $end
$var wire 64 ^ bitwise_xor [63:0] $end
$var wire 64 _ bitwise_and [63:0] $end
$var wire 64 ` add_sub [63:0] $end
$var reg 64 a FINAL [63:0] $end
$scope module ADDER $end
$var wire 1 b control $end
$var wire 64 c num1 [63:0] $end
$var wire 64 d num2 [63:0] $end
$var wire 1 L overflow $end
$var wire 64 e w3 [63:0] $end
$var wire 64 f w2 [63:0] $end
$var wire 64 g w1 [63:0] $end
$var wire 64 h sum [63:0] $end
$var wire 64 i num2_change [63:0] $end
$var wire 64 j carry [63:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope begin genblk1[1] $end
$upscope $end
$scope begin genblk1[2] $end
$upscope $end
$scope begin genblk1[3] $end
$upscope $end
$scope begin genblk1[4] $end
$upscope $end
$scope begin genblk1[5] $end
$upscope $end
$scope begin genblk1[6] $end
$upscope $end
$scope begin genblk1[7] $end
$upscope $end
$scope begin genblk1[8] $end
$upscope $end
$scope begin genblk1[9] $end
$upscope $end
$scope begin genblk1[10] $end
$upscope $end
$scope begin genblk1[11] $end
$upscope $end
$scope begin genblk1[12] $end
$upscope $end
$scope begin genblk1[13] $end
$upscope $end
$scope begin genblk1[14] $end
$upscope $end
$scope begin genblk1[15] $end
$upscope $end
$scope begin genblk1[16] $end
$upscope $end
$scope begin genblk1[17] $end
$upscope $end
$scope begin genblk1[18] $end
$upscope $end
$scope begin genblk1[19] $end
$upscope $end
$scope begin genblk1[20] $end
$upscope $end
$scope begin genblk1[21] $end
$upscope $end
$scope begin genblk1[22] $end
$upscope $end
$scope begin genblk1[23] $end
$upscope $end
$scope begin genblk1[24] $end
$upscope $end
$scope begin genblk1[25] $end
$upscope $end
$scope begin genblk1[26] $end
$upscope $end
$scope begin genblk1[27] $end
$upscope $end
$scope begin genblk1[28] $end
$upscope $end
$scope begin genblk1[29] $end
$upscope $end
$scope begin genblk1[30] $end
$upscope $end
$scope begin genblk1[31] $end
$upscope $end
$scope begin genblk1[32] $end
$upscope $end
$scope begin genblk1[33] $end
$upscope $end
$scope begin genblk1[34] $end
$upscope $end
$scope begin genblk1[35] $end
$upscope $end
$scope begin genblk1[36] $end
$upscope $end
$scope begin genblk1[37] $end
$upscope $end
$scope begin genblk1[38] $end
$upscope $end
$scope begin genblk1[39] $end
$upscope $end
$scope begin genblk1[40] $end
$upscope $end
$scope begin genblk1[41] $end
$upscope $end
$scope begin genblk1[42] $end
$upscope $end
$scope begin genblk1[43] $end
$upscope $end
$scope begin genblk1[44] $end
$upscope $end
$scope begin genblk1[45] $end
$upscope $end
$scope begin genblk1[46] $end
$upscope $end
$scope begin genblk1[47] $end
$upscope $end
$scope begin genblk1[48] $end
$upscope $end
$scope begin genblk1[49] $end
$upscope $end
$scope begin genblk1[50] $end
$upscope $end
$scope begin genblk1[51] $end
$upscope $end
$scope begin genblk1[52] $end
$upscope $end
$scope begin genblk1[53] $end
$upscope $end
$scope begin genblk1[54] $end
$upscope $end
$scope begin genblk1[55] $end
$upscope $end
$scope begin genblk1[56] $end
$upscope $end
$scope begin genblk1[57] $end
$upscope $end
$scope begin genblk1[58] $end
$upscope $end
$scope begin genblk1[59] $end
$upscope $end
$scope begin genblk1[60] $end
$upscope $end
$scope begin genblk1[61] $end
$upscope $end
$scope begin genblk1[62] $end
$upscope $end
$scope begin genblk1[63] $end
$upscope $end
$upscope $end
$scope module ANDER $end
$var wire 64 k num1 [63:0] $end
$var wire 64 l num2 [63:0] $end
$var wire 64 m bit_wise_and [63:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope begin genblk1[1] $end
$upscope $end
$scope begin genblk1[2] $end
$upscope $end
$scope begin genblk1[3] $end
$upscope $end
$scope begin genblk1[4] $end
$upscope $end
$scope begin genblk1[5] $end
$upscope $end
$scope begin genblk1[6] $end
$upscope $end
$scope begin genblk1[7] $end
$upscope $end
$scope begin genblk1[8] $end
$upscope $end
$scope begin genblk1[9] $end
$upscope $end
$scope begin genblk1[10] $end
$upscope $end
$scope begin genblk1[11] $end
$upscope $end
$scope begin genblk1[12] $end
$upscope $end
$scope begin genblk1[13] $end
$upscope $end
$scope begin genblk1[14] $end
$upscope $end
$scope begin genblk1[15] $end
$upscope $end
$scope begin genblk1[16] $end
$upscope $end
$scope begin genblk1[17] $end
$upscope $end
$scope begin genblk1[18] $end
$upscope $end
$scope begin genblk1[19] $end
$upscope $end
$scope begin genblk1[20] $end
$upscope $end
$scope begin genblk1[21] $end
$upscope $end
$scope begin genblk1[22] $end
$upscope $end
$scope begin genblk1[23] $end
$upscope $end
$scope begin genblk1[24] $end
$upscope $end
$scope begin genblk1[25] $end
$upscope $end
$scope begin genblk1[26] $end
$upscope $end
$scope begin genblk1[27] $end
$upscope $end
$scope begin genblk1[28] $end
$upscope $end
$scope begin genblk1[29] $end
$upscope $end
$scope begin genblk1[30] $end
$upscope $end
$scope begin genblk1[31] $end
$upscope $end
$scope begin genblk1[32] $end
$upscope $end
$scope begin genblk1[33] $end
$upscope $end
$scope begin genblk1[34] $end
$upscope $end
$scope begin genblk1[35] $end
$upscope $end
$scope begin genblk1[36] $end
$upscope $end
$scope begin genblk1[37] $end
$upscope $end
$scope begin genblk1[38] $end
$upscope $end
$scope begin genblk1[39] $end
$upscope $end
$scope begin genblk1[40] $end
$upscope $end
$scope begin genblk1[41] $end
$upscope $end
$scope begin genblk1[42] $end
$upscope $end
$scope begin genblk1[43] $end
$upscope $end
$scope begin genblk1[44] $end
$upscope $end
$scope begin genblk1[45] $end
$upscope $end
$scope begin genblk1[46] $end
$upscope $end
$scope begin genblk1[47] $end
$upscope $end
$scope begin genblk1[48] $end
$upscope $end
$scope begin genblk1[49] $end
$upscope $end
$scope begin genblk1[50] $end
$upscope $end
$scope begin genblk1[51] $end
$upscope $end
$scope begin genblk1[52] $end
$upscope $end
$scope begin genblk1[53] $end
$upscope $end
$scope begin genblk1[54] $end
$upscope $end
$scope begin genblk1[55] $end
$upscope $end
$scope begin genblk1[56] $end
$upscope $end
$scope begin genblk1[57] $end
$upscope $end
$scope begin genblk1[58] $end
$upscope $end
$scope begin genblk1[59] $end
$upscope $end
$scope begin genblk1[60] $end
$upscope $end
$scope begin genblk1[61] $end
$upscope $end
$scope begin genblk1[62] $end
$upscope $end
$scope begin genblk1[63] $end
$upscope $end
$upscope $end
$scope module XOR $end
$var wire 1 n control $end
$var wire 64 o final [63:0] $end
$var wire 64 p num1 [63:0] $end
$var wire 64 q num2 [63:0] $end
$var wire 64 r bit_wise_xor [63:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope begin genblk1[1] $end
$upscope $end
$scope begin genblk1[2] $end
$upscope $end
$scope begin genblk1[3] $end
$upscope $end
$scope begin genblk1[4] $end
$upscope $end
$scope begin genblk1[5] $end
$upscope $end
$scope begin genblk1[6] $end
$upscope $end
$scope begin genblk1[7] $end
$upscope $end
$scope begin genblk1[8] $end
$upscope $end
$scope begin genblk1[9] $end
$upscope $end
$scope begin genblk1[10] $end
$upscope $end
$scope begin genblk1[11] $end
$upscope $end
$scope begin genblk1[12] $end
$upscope $end
$scope begin genblk1[13] $end
$upscope $end
$scope begin genblk1[14] $end
$upscope $end
$scope begin genblk1[15] $end
$upscope $end
$scope begin genblk1[16] $end
$upscope $end
$scope begin genblk1[17] $end
$upscope $end
$scope begin genblk1[18] $end
$upscope $end
$scope begin genblk1[19] $end
$upscope $end
$scope begin genblk1[20] $end
$upscope $end
$scope begin genblk1[21] $end
$upscope $end
$scope begin genblk1[22] $end
$upscope $end
$scope begin genblk1[23] $end
$upscope $end
$scope begin genblk1[24] $end
$upscope $end
$scope begin genblk1[25] $end
$upscope $end
$scope begin genblk1[26] $end
$upscope $end
$scope begin genblk1[27] $end
$upscope $end
$scope begin genblk1[28] $end
$upscope $end
$scope begin genblk1[29] $end
$upscope $end
$scope begin genblk1[30] $end
$upscope $end
$scope begin genblk1[31] $end
$upscope $end
$scope begin genblk1[32] $end
$upscope $end
$scope begin genblk1[33] $end
$upscope $end
$scope begin genblk1[34] $end
$upscope $end
$scope begin genblk1[35] $end
$upscope $end
$scope begin genblk1[36] $end
$upscope $end
$scope begin genblk1[37] $end
$upscope $end
$scope begin genblk1[38] $end
$upscope $end
$scope begin genblk1[39] $end
$upscope $end
$scope begin genblk1[40] $end
$upscope $end
$scope begin genblk1[41] $end
$upscope $end
$scope begin genblk1[42] $end
$upscope $end
$scope begin genblk1[43] $end
$upscope $end
$scope begin genblk1[44] $end
$upscope $end
$scope begin genblk1[45] $end
$upscope $end
$scope begin genblk1[46] $end
$upscope $end
$scope begin genblk1[47] $end
$upscope $end
$scope begin genblk1[48] $end
$upscope $end
$scope begin genblk1[49] $end
$upscope $end
$scope begin genblk1[50] $end
$upscope $end
$scope begin genblk1[51] $end
$upscope $end
$scope begin genblk1[52] $end
$upscope $end
$scope begin genblk1[53] $end
$upscope $end
$scope begin genblk1[54] $end
$upscope $end
$scope begin genblk1[55] $end
$upscope $end
$scope begin genblk1[56] $end
$upscope $end
$scope begin genblk1[57] $end
$upscope $end
$scope begin genblk1[58] $end
$upscope $end
$scope begin genblk1[59] $end
$upscope $end
$scope begin genblk1[60] $end
$upscope $end
$scope begin genblk1[61] $end
$upscope $end
$scope begin genblk1[62] $end
$upscope $end
$scope begin genblk1[63] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module F $end
$var wire 64 s PC [63:0] $end
$var wire 1 4 clk $end
$var reg 1 ) dmem $end
$var reg 1 - halt $end
$var reg 4 t icode [3:0] $end
$var reg 4 u ifun [3:0] $end
$var reg 1 * invalid_instr $end
$var reg 4 v rA [3:0] $end
$var reg 4 w rB [3:0] $end
$var reg 64 x valC [63:0] $end
$var reg 64 y valP [63:0] $end
$upscope $end
$scope module M $end
$var wire 1 4 clk $end
$var wire 4 z icode [3:0] $end
$var wire 64 { valA [63:0] $end
$var wire 64 | valB [63:0] $end
$var wire 64 } valE [63:0] $end
$var wire 64 ~ valP [63:0] $end
$var reg 64 !" valM [63:0] $end
$upscope $end
$scope module P $end
$var wire 1 4 clk $end
$var wire 1 . cnd $end
$var wire 4 "" icode [3:0] $end
$var wire 64 #" valC [63:0] $end
$var wire 64 $" valM [63:0] $end
$var wire 64 %" valP [63:0] $end
$var reg 64 &" PC_new [63:0] $end
$upscope $end
$scope module w $end
$var wire 1 4 clk $end
$var wire 4 '" icode [3:0] $end
$var wire 4 (" rA [3:0] $end
$var wire 4 )" rB [3:0] $end
$var wire 64 *" valE [63:0] $end
$var wire 64 +" valM [63:0] $end
$var reg 64 ," reg_file_0 [63:0] $end
$var reg 64 -" reg_file_1 [63:0] $end
$var reg 64 ." reg_file_10 [63:0] $end
$var reg 64 /" reg_file_11 [63:0] $end
$var reg 64 0" reg_file_12 [63:0] $end
$var reg 64 1" reg_file_13 [63:0] $end
$var reg 64 2" reg_file_14 [63:0] $end
$var reg 64 3" reg_file_2 [63:0] $end
$var reg 64 4" reg_file_3 [63:0] $end
$var reg 64 5" reg_file_4 [63:0] $end
$var reg 64 6" reg_file_5 [63:0] $end
$var reg 64 7" reg_file_6 [63:0] $end
$var reg 64 8" reg_file_7 [63:0] $end
$var reg 64 9" reg_file_8 [63:0] $end
$var reg 64 :" reg_file_9 [63:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 :"
b0 9"
b0 8"
b0 7"
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
b0 1"
b0 0"
b0 /"
b0 ."
b0 -"
b0 ,"
bx +"
b100000000 *"
b11 )"
b0 ("
b11 '"
b1010 &"
b1010 %"
bx $"
b100000000 #"
b11 ""
bx !"
b1010 ~
b100000000 }
bx |
bx {
b11 z
b1010 y
b100000000 x
b11 w
b0 v
b0 u
b11 t
b0 s
b100000000 r
b0 q
b100000000 p
bz o
zn
b0 m
b0 l
b100000000 k
b0 j
b0 i
b100000000 h
b100000000 g
b0 f
b0 e
b0 d
b100000000 c
0b
b100000000 a
b100000000 `
b0 _
b100000000 ^
b100000000 ]
b0 \
b100000000 [
b0 Z
xY
b100000000 X
xW
xV
b0 U
xT
xS
xR
b0 Q
b100000000 P
b11 O
b0 N
b100000000 M
0L
b100000000 K
bx J
bx I
bx H
bx G
b11 F
b0 E
b11 D
b0 C
b0 B
b0 A
b0 @
b0 ?
b0 >
b0 =
b0 <
b0 ;
b0 :
b0 9
b0 8
b0 7
b0 6
b0 5
04
b0 3
02
b1010 1
00
0/
1.
0-
b11 ,
b0 +
0*
0)
b0 (
b11 '
bx &
bx %
b100000000 $
b100000000 #
bx "
b1010 !
$end
#5
b1000000000 #
b1000000000 X
b1000000000 }
b1000000000 *"
b1000000000 M
b1000000000 ]
b1000000000 a
b1000000000 `
b1000000000 h
b1000000000 g
b1000000000 ^
b1000000000 r
b1000000000 P
b1000000000 [
b1000000000 c
b1000000000 k
b1000000000 p
b10100 1
b10100 &"
b10 '
b10 D
b10 w
b10 )"
b1000000000 $
b1000000000 K
b1000000000 x
b1000000000 #"
b10100 !
b10100 y
b10100 ~
b10100 %"
b1010 3
b1010 s
b100000000 =
b100000000 4"
14
#10
04
#15
b10 (
b10 E
b10 v
b10 ("
0L
b1100000000 #
b1100000000 X
b1100000000 }
b1100000000 *"
00
0/
b1100000000 M
b1100000000 ]
b1100000000 a
b1100000000 `
b1100000000 h
b100000000 i
b1100000000 g
b0 _
b0 m
b1100000000 ^
b1100000000 r
02
b100000000 %
b100000000 H
b100000000 J
b100000000 |
b1000000000 &
b1000000000 G
b1000000000 I
b1000000000 {
b100000000 Q
b100000000 \
b100000000 d
b100000000 l
b100000000 q
b1000000000 P
b1000000000 [
b1000000000 c
b1000000000 k
b1000000000 p
b10110 1
b10110 &"
b11 '
b11 D
b11 w
b11 )"
bx $
bx K
bx x
bx #"
b10110 !
b10110 y
b10110 ~
b10110 %"
b110 ,
b110 F
b110 O
b110 t
b110 z
b110 ""
b110 '"
b10100 3
b10100 s
b1000000000 <
b1000000000 3"
14
#20
04
#25
b11000 1
b11000 &"
bx (
bx E
bx v
bx ("
bx '
bx D
bx w
bx )"
b11000 !
b11000 y
b11000 ~
b11000 %"
bx +
bx N
bx u
bx ,
bx F
bx O
bx t
bx z
bx ""
bx '"
b10110 3
b10110 s
b10100000000 #
b10100000000 X
b10100000000 }
b10100000000 *"
b10100000000 M
b10100000000 ]
b10100000000 a
b1000000000 j
b10100000000 `
b10100000000 h
b1000000000 e
b100000000 g
b1100000000 i
b1000000000 _
b1000000000 m
b100000000 ^
b100000000 r
b1100000000 Q
b1100000000 \
b1100000000 d
b1100000000 l
b1100000000 q
b1100000000 %
b1100000000 H
b1100000000 J
b1100000000 |
b1100000000 =
b1100000000 4"
14
#30
04
#35
b11000 3
b11000 s
14
#40
04
#45
14
#50
04
#55
14
#60
04
#65
14
#70
04
#75
14
#80
04
#85
14
#90
04
#95
14
#100
04
